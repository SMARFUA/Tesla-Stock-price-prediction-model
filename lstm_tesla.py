# -*- coding: utf-8 -*-
"""LSTM_tesla.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pDsGeMqWMh-muDC2JICvJXC95i0CRCW4
"""

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
from sklearn.metrics import mean_squared_error

df = web.DataReader('TSLA', data_source='yahoo', start='2010-01-01', end='2020-12-17')
df.describe()

# num of rows and columns
rows = df.shape[0]
cols = df.shape[1]
look_back = 100

# Plot of Close Price
plt.figure(figsize=(16,8))
plt.title('close price')
plt.plot(df['Close'])
plt.xlabel('Data', fontsize=18)
plt.show()

# Plot of Volume
plt.figure(figsize=(16,8))
plt.title('Volume')
plt.plot(df['Volume'])
plt.xlabel('Data', fontsize = 18)
plt.show()

data = df.filter(['Close'])
dataset = data.values
train_data_len = math.ceil( len(dataset)* .8)

# scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

# preparing the data
train_data = scaled_data[0:train_data_len, :]
x_train = []
y_train = []

for i in range(100, len(train_data)):
  x_train.append(train_data[i-look_back:i, 0])
  y_train.append(train_data[i,0])

x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], look_back, 1))
x_train.shape

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

#Training
history = model.fit(x_train, y_train, batch_size=1, epochs=4)
plt.plot(history.history['loss'])
plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

# testing dataset
test_data = scaled_data[train_data_len - look_back:, :]
x_test = []
y_test = dataset[train_data_len:, :]
for i in range(look_back, len(test_data)):
  x_test.append(test_data[i- look_back:i,0])

x_test = np.array(x_test)

x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#rmse = np.sqrt(((predictions - y_test)**2).mean())
rmse = (np.sqrt(np.mean(np.square((y_test - predictions)/ y_test))))*100
rmse
test_score = np.sqrt(mean_squared_error(y_test, predictions))
test_score

train = data[:train_data_len]
valid = data[train_data_len:]
valid['Predictions'] = predictions
plt.figure(figsize = (16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')